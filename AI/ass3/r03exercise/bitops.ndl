type bits = [0..5];

decl B[bits] : bool;



action inc()
true
=>
if not B[0] then B[0] else
     if not B[1] then (B[1]; not B[0];) else
          if (B[0] & B[1] & not B[2]) then (not B[0]; not B[1]; B[2];) else
               if (B[0] & B[1] & B[2] & not B[3]) then (not B[0]; not B[1]; not B[2]; B[3];) else
                    if (B[0] & B[1] & B[2] & B[3] & not B[4]) then (not B[0]; not B[1]; not B[2]; not B[3]; B[4];) else
                         if (B[0] & B[1] & B[2] & B[3] & B[4] & not B[5]) then (not B[0]; not B[1]; not B[2]; not B[3]; not B[4]; B[5];);



action shift()
true
=>
B[5]:=B[4];
B[4]:=B[3];
B[3]:=B[2];
B[2]:=B[1];
B[1]:=B[0];
B[0]:=0;


action invert210()
true
=>
B[0]:= not B[0];
B[1]:= not B[1];
B[2]:= not B[2];


initial
B[0] := 1;

goal B[5] & B[4] & B[3] & not B[2] & B[1] & not B[0];
